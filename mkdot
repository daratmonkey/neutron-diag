#!/bin/sh

topdir=$PWD
workdir=$(mktemp -d networkXXXXXX)
trap "cd $topdir; rm -rf $workdir" EXIT

cd $workdir

# Get a list of running instances and their associated
# interfaces.
virsh list --name | while read instance; do
	[ "$instance" ] || continue

	echo "$instance instance global" >> nodes

	for dev in $(virsh dumpxml $instance |
		xmllint --xpath '//interface/target/@dev' -); do
		dev=${dev#dev=\"}
		dev=${dev%\"}
		echo "$instance $dev" >> edges
	done
done

# Gather network device information from the global
# namespace.
sh $topdir/ns-get-devs global

# Gather network device information for all of the
# active namespaces.
ip netns | while read ns; do
	ip netns exec $ns sh $topdir/ns-get-devs $ns
done

# Add edges for veth peer inferfaces.
> seen
while read dev ifindex peer_ifindex; do
	peer_dev=$(awk -v peer=$peer_ifindex '$2 == peer {print $1}' peers)
	grep -q $peer_dev seen && continue

	echo "$dev $peer_dev" >> edges
	echo $dev >> seen
done < peers

# Generates dot output.

cat <<EOF
digraph network {
	rankdir=LR
	edge [dir=both]
EOF

# Emit device nodes by type.
sort -k3 nodes | awk '
	$3 != "global" && $3 != lastns {
		if (lastns)
			print "}"
		printf "subgraph \"cluster_%s\" {\n", $3
		printf "  label=\"%s\"\n", $3
		lastns=$3
	}

	$2 == "instance" {printf "\"%s\" [shape=box,style=filled,color=red]\n", $1}
	$2 == "ovsbridge" {printf "\"%s\" [shape=oval,style=filled,color=lightblue]\n", $1}
	$2 == "bridge" {printf "\"%s\" [shape=oval,style=filled,color=green]\n", $1}
	$2 == "veth" {printf "\"%s\" [shape=oval,style=filled,color=gray50]\n", $1}

	$2 !~ "instance|ovsbridge|bridge|veth" {
		printf "\"%s\" [style=filled,color=grey70]\n", $1
	}

	END {
		print "}"
	}
'

awk '
	{printf "\"%s\" -> \"%s\"\n", $1, $2}
' edges

cat <<EOF
}
EOF

