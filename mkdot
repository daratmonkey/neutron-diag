#!/bin/sh

topdir=$PWD
workdir=$(mktemp -d networkXXXXXX)
trap "cd $topdir; rm -rf $workdir" EXIT

cd $workdir

> nodes
> edges
> peers

# Get a list of running instances and their associated
# interfaces.
virsh list --name | while read instance; do
	[ "$instance" ] || continue

	echo "$instance instance global" >> nodes

	for dev in $(virsh dumpxml $instance |
		xmllint --xpath '//interface/target/@dev' -); do
		dev=${dev#dev=\"}
		dev=${dev%\"}
		echo "$instance $dev" >> edges
	done
done

# Gather network device information from the global
# namespace.
sh $topdir/ns-get-devs global

# Gather network device information for all of the
# active namespaces.
ip netns | while read ns; do
	ip netns exec $ns sh $topdir/ns-get-devs $ns
done

# Get information about OVS patches
> seen
ovs-vsctl list-br |
while read brdev; do
	ovs-vsctl list-ports $brdev |
	while read port; do
		porttype=$(ovs-vsctl get Interface $port type)
		[ "$porttype" = patch ] || continue
		peer=$(ovs-vsctl get Interface $port options:peer)

		echo "$port patch global" >> nodes
		grep -q $peer seen && continue
		if [ "$peer" ]; then
			echo "$port $peer" >> edges
		fi

		echo $port >> seen
	done
done

# Add edges for veth peer inferfaces.
> seen
while read dev ifindex peer_ifindex; do
	peer_dev=$(awk -v peer=$peer_ifindex '$2 == peer {print $1}' peers)
	grep -q $peer_dev seen && continue

	echo "$dev $peer_dev" >> edges
	echo $dev >> seen
done < peers

# Generates dot output.

cat <<EOF
digraph network {
	rankdir=LR
	edge [dir=both]
EOF

# Emit device nodes by type.
sort -k3 nodes | awk '
	$3 != "global" && $3 != lastns {
		if (lastns)
			print "}"
		printf "subgraph \"cluster_%s\" {\n", $3
		printf "  label=\"%s\"\n", $3
		lastns=$3
	}

	{
		style="filled"
		shape="oval"
		color="grey50"
	}

	$2 == "instance" {shape="box"; color="tomato"}
	$2 == "ovsbridge" {color="lightblue"}
	$2 == "bridge" {color="olivedrab"}
	$2 == "veth" {color="lightgrey"}
	$2 == "patch" {color="gold"}

	{
		printf "\"%s\" [shape=%s, style=%s,color=%s]\n", $1, shape, style, color
	}

	END {
		print "}"
	}
'

awk '
	{printf "\"%s\" -> \"%s\"\n", $1, $2}
' edges

cat <<EOF
}
EOF

